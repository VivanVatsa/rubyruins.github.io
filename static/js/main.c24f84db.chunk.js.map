{"version":3,"sources":["Components/Navbar.jsx","Components/Footer.jsx","Components/Certificate.jsx","Components/NotFound.jsx","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","href","role","Footer","class","Certificate","NotFound","App","basename","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8PA8BeA,MA5Bf,WACC,OACE,yBAAKC,UAAU,uDACd,4BAAQA,UAAU,iBAAiBC,KAAK,SAASC,cAAY,WAAWC,cAAY,uBAAuBC,gBAAc,sBAAsBC,gBAAc,QAAQC,aAAW,qBAC/K,0BAAMN,UAAU,yBAEjB,yBAAKA,UAAU,2BAA2BO,GAAG,uBAC5C,uBAAGP,UAAU,oBAAoBQ,KAAK,WAAU,0BAAMC,KAAK,MAAMH,aAAW,QAA5B,SAChD,wBAAIN,UAAU,mCACb,wBAAIA,UAAU,YACb,uBAAGA,UAAU,WAAWQ,KAAK,aAA7B,iBAED,wBAAIR,UAAU,YACb,uBAAGA,UAAU,WAAWQ,KAAK,WAA7B,eAED,wBAAIR,UAAU,YACb,uBAAGA,UAAU,WAAWQ,KAAK,eAA7B,mBAED,wBAAIR,UAAU,YACb,uBAAGA,UAAU,WAAWQ,KAAK,UAA7B,gBAIH,wBAAIR,UAAU,gCAA+B,uBAAGA,UAAU,wBCf/CU,MARf,WACC,OACE,yBAAKV,UAAU,qCACd,wCAAa,uBAAGW,MAAM,kBAAtB,QAA+C,uBAAGA,MAAM,iBAAxD,2B,MCkBWC,ICdAC,EAPE,kBACf,yBAAKb,UAAU,0BACb,uBAAGA,UAAU,4BAAb,iBACA,gDCwBYc,EAfJ,kBACX,kBAAC,IAAD,CAAeC,SAAS,wBACvB,yBAAKf,UAAU,aACf,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAOgB,OAAK,EAACC,KAAK,IAAIC,UAAWnB,IAEjC,kBAAC,IAAD,CAAOiB,OAAK,EAACC,KAAK,UAAUC,UAAWR,IAGvC,kBAAC,IAAD,CAAOQ,UAAWL,QCXDM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACD,kBAAC,EAAD,OAECC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c24f84db.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Navbar() {\r\n\treturn (\r\n\t\t\t<nav className=\"navbar navbar-expand-md navbar-light fixed-top py-4\">\r\n\t\t\t\t<button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarTogglerDemo01\" aria-controls=\"navbarTogglerDemo01\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n\t\t\t\t\t<span className=\"navbar-toggler-icon\"></span>\r\n\t\t\t\t</button>\r\n\t\t\t\t<div className=\"collapse navbar-collapse\" id=\"navbarTogglerDemo01\">\r\n\t\t\t\t\t<a className=\"navbar-brand pl-4\" href=\"#soumya\"><span role=\"img\" aria-label=\"home\">home</span></a>\r\n\t\t\t\t\t<ul className=\"navbar-nav mr-auto mt-2 mt-lg-0\">\r\n\t\t\t\t\t\t<li className=\"nav-item\">\r\n\t\t\t\t\t\t\t<a className=\"nav-link\" href=\"#projects\">01. Projects</a>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li className=\"nav-item\">\r\n\t\t\t\t\t\t\t<a className=\"nav-link\" href=\"#skills\">02. Skills</a>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li className=\"nav-item\">\r\n\t\t\t\t\t\t\t<a className=\"nav-link\" href=\"#experience\">03. Experience</a>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li className=\"nav-item\">\r\n\t\t\t\t\t\t\t<a className=\"nav-link\" href=\"#about\">04. About</a>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t</div>\r\n\t\t\t\t<li className=\"navbar-brand ml-auto toggler\"><i className=\"far fa-sun fa-3x\"></i></li>\r\n\t\t\t</nav>\r\n\t);\r\n}\r\n\t\r\nexport default Navbar;","import React from 'react';\r\n\r\nfunction Footer() {\r\n\treturn (\r\n\t\t\t<div className=\"footer-copyright text-center py-1\">\r\n\t\t\t\t<p>Made with <i class=\"fas fa-coffee\"></i> and <i class=\"fab fa-react\"></i> Â© 2020 rubyruins.</p>\r\n\t\t\t</div>\r\n\t);\r\n}\r\n\t\r\nexport default Footer;","import React from 'react';\r\n\r\nfunction Certificate(props) {\r\n\treturn (\r\n        <div className=\"row\">\r\n            <div className=\"col-lg-12 collapse-heading\">\r\n                <button type=\"button\" className=\"btn btn-link\" data-toggle=\"collapse\" data-target={`#${props.id}`}>\r\n                    <i className=\"fa fa-plus\"></i>&nbsp;{props.title}\r\n                </button>\t\t\t\t\t\t\t\t\t\t\r\n            </div>\r\n            <div id={props.id} className=\"col-lg-12 collapse\">\r\n                <div className=\"main-content\">\r\n                    <p>\r\n                        <ul>\r\n                            {props.courses.map(course => <li>{course}</li>)}\r\n                        </ul>\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\t);\r\n}\r\n\t\r\nexport default Certificate;","import React from \"react\";\r\n\r\nconst NotFound = () => (\r\n  <div className=\"main-content not-found\">\r\n    <i className=\"material-icons icn-error\">error_outline</i>\r\n    <h2>Page Not Found</h2>\r\n  </div>\r\n);\r\n\r\nexport default NotFound;","import React from 'react';\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport './App.css';\nimport Navbar from './Components/Navbar';\nimport Footer from './Components/Footer';\nimport Project from './Components/Project';\nimport Skill from './Components/Skill'\nimport Internship from './Components/Internship';\nimport Organization from './Components/Organization'\nimport Certificate from './Components/Certificate';\nimport NotFound from \"./Components/NotFound\"\nimport {projects, languages, machineLearningSkills, webDevelopmentSkills, tools, internships, organizations, certifications} from './Data';\n\n\nconst App = () => (\n\t<BrowserRouter basename=\"/rubyruins.github.io\">\n\t\t<div className=\"container\">\n\t\t<Switch>\n\t\t\t<Route exact path=\"/\" component={Navbar} />\n\t\t\t{/* <Route path=\"/about\" render={() => <About title=\"About\" />} /> */}\n\t\t\t<Route exact path=\"/footer\" component={Footer} />\n\t\t\t{/* <Route path=\"/teachers/:topic/:name\" component={Featured} /> */}\n\t\t\t{/* <Route path=\"/courses\" component={Courses} /> */}\n\t\t\t<Route component={NotFound} />\n\t\t</Switch>\n\t\t</div>\n\t</BrowserRouter>\n\t);\n\t\n\texport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n\t<App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}